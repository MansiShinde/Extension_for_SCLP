**PROCEDURE: main
**BEGIN: RTL Statements
	iLoad:    	v0 <- 3    	;; Loading integer number 3
	store:    	a_ <- v0    
	iLoad:    	v0 <- 4    	;; Loading integer number 4
	store:    	b_ <- v0    
	iLoad:    	v0 <- 3    	;; Loading integer number 3
	store:    	c_ <- v0    
	iLoad:    	v0 <- 4    	;; Loading integer number 4
	store:    	d_ <- v0    
	iLoad:    	v0 <- 3    	;; Loading integer number 3
	store:    	e_ <- v0    
	iLoad:    	v0 <- 4    	;; Loading integer number 4
	store:    	f_ <- v0    
	iLoad:    	v0 <- 3    	;; Loading integer number 3
	store:    	g_ <- v0    
	iLoad:    	v0 <- 4    	;; Loading integer number 4
	store:    	h_ <- v0    
	iLoad:    	v0 <- 3    	;; Loading integer number 3
	store:    	i_ <- v0    
	iLoad:    	v0 <- 4    	;; Loading integer number 4
	store:    	j_ <- v0    
	iLoad:    	v0 <- 3    	;; Loading integer number 3
	store:    	k_ <- v0    
	iLoad:    	v0 <- 4    	;; Loading integer number 4
	store:    	l_ <- v0    
	iLoad:    	v0 <- 3    	;; Loading integer number 3
	store:    	m_ <- v0    
	iLoad:    	v0 <- 4    	;; Loading integer number 4
	store:    	n_ <- v0    
	iLoad.d:    	f2 <- 3.00    	;; Loading float number 3.000000
	store.d:    	q_ <- f2    
	iLoad.d:    	f2 <- 4.00    	;; Loading float number 4.000000
	store.d:    	r_ <- f2    
	iLoad.d:    	f2 <- 3.00    	;; Loading float number 3.000000
	store.d:    	s_ <- f2    
	iLoad.d:    	f2 <- 4.00    	;; Loading float number 4.000000
	store.d:    	t_ <- f2    
	iLoad.d:    	f2 <- 3.00    	;; Loading float number 3.000000
	store.d:    	u_ <- f2    
	iLoad.d:    	f2 <- 4.00    	;; Loading float number 4.000000
	store.d:    	v_ <- f2    
	iLoad.d:    	f2 <- 3.00    	;; Loading float number 3.000000
	store.d:    	w_ <- f2    
	iLoad.d:    	f2 <- 4.00    	;; Loading float number 4.000000
	store.d:    	x_ <- f2    
	iLoad.d:    	f2 <- 3.00    	;; Loading float number 3.000000
	store.d:    	y_ <- f2    
	iLoad.d:    	f2 <- 4.00    	;; Loading float number 4.000000
	store.d:    	z_ <- f2    
	load:    	v0 <- e_    
	load:    	t1 <- f_    
	mul:    	t0 <- v0 , t1
	load:    	v0 <- g_    
	load:    	t2 <- h_    
	sub:    	t1 <- v0 , t2
	load:    	t2 <- i_    
	div:    	v0 <- t1 , t2
	add:    	t1 <- t0 , v0
	load:    	v0 <- d_    
	div:    	t0 <- v0 , t1
	load:    	t1 <- j_    
	div:    	v0 <- t0 , t1
	load:    	t0 <- l_    
	load:    	t2 <- m_    
	add:    	t1 <- t0 , t2
	load:    	t2 <- n_    
	sub:    	t0 <- t1 , t2
	load:    	t1 <- k_    
	mul:    	t2 <- t1 , t0
	add:    	t0 <- v0 , t2
	load:    	v0 <- c_    
	mul:    	t1 <- v0 , t0
	load:    	v0 <- b_    
	add:    	t0 <- v0 , t1
	store:    	a_ <- t0    
	load.d:    	f2 <- y_    
	load.d:    	f6 <- z_    
	div.d:    	f4 <- f2 , f6
	load.d:    	f2 <- x_    
	div.d:    	f6 <- f2 , f4
	load.d:    	f2 <- w_    
	div.d:    	f4 <- f2 , f6
	load.d:    	f2 <- v_    
	div.d:    	f6 <- f2 , f4
	load.d:    	f2 <- u_    
	div.d:    	f4 <- f2 , f6
	load.d:    	f2 <- t_    
	div.d:    	f6 <- f2 , f4
	load.d:    	f2 <- s_    
	div.d:    	f4 <- f2 , f6
	load.d:    	f2 <- r_    
	div.d:    	f6 <- f2 , f4
	store.d:    	q_ <- f6    
**END: RTL Statements

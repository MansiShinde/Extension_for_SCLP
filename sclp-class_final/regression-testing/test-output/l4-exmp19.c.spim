
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 16		# Make space for the locals
# Prologue ends

	li $v0, 5		# Source:5
	sw $v0, -4($fp)	# Dest: a_
	li $v0, 1		# Source:1
	sw $v0, -8($fp)	# Dest: b_

Label3:    	

Label3:    	
	lw $v0, -8($fp)		# Source:b_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp2, Opd1:b_, Opd2:1
	sw $t0, -8($fp)	# Dest: b_
	lw $v0, -8($fp)		# Source:b_
	li $t1, 5		# Source:5
	slt $t0, $v0, $t1	# Result:temp1, Opd1:b_, Opd2:5
	bgtz $t0, Label3 
	lw $v0, -4($fp)		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp3, Opd1:a_, Opd2:1
	sw $t0, -4($fp)	# Dest: a_
	lw $v0, -4($fp)		# Source:a_
	li $t1, 10		# Source:10
	sgt $t0, $v0, $t1	# Result:temp0, Opd1:a_, Opd2:10
	bgtz $t0, Label3 

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 16
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


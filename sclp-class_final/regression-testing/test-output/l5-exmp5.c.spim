
	.data
i2_:	.word 0
i1_:	.word 0
f2_:	.double 0.0
f1_:	.double 0.0

	.text 			# The .text assembler directive indicates
	.globl func1_		# The following is the code (as oppose to data)
func1_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	li $v0, 5		# Source:5
	sw $v0, i2_	# Dest: i2_
	li.d $f2, 5.00		# Loading float number 5.000000
	s.d $f2, f2_	# Dest: f2_

# Epilogue Begins
epilogue_func1_:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl func2_		# The following is the code (as oppose to data)
func2_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	lw $v0, 12($fp)		# Source:a_
	li $t1, 10		# Source:10
	add $t0, $v0, $t1	# Result:temp3, Opd1:a_, Opd2:10
	sw $t0, 12($fp)	# Dest: a_
	li $v0, 5		# Source:5
	sw $v0, 24($fp)	# Dest: i1_
	lw $v0, 12($fp)		# Source:a_
	lw $t1, 24($fp)		# Source:i1_
	add $t0, $v0, $t1	# Result:temp4, Opd1:a_, Opd2:i1_
	lw $t1, i2_		# Source:i2_
	add $v0, $t0, $t1	# Result:temp5, Opd1:temp4, Opd2:i2_
	li $t1, 2		# Source:2
	add $t0, $v0, $t1	# Result:temp6, Opd1:temp5, Opd2:2
	j Label3

Label3:    	
	move $v1, $t0		# Source:temp0
	j epilogue_func2_

# Epilogue Begins
epilogue_func2_:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl func3_		# The following is the code (as oppose to data)
func3_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	l.d $f2, 20($fp)		# Source:b_
	l.d $f6, f2_		# Source:f2_
	add.d $f4, $f2, $f6	# Result:temp7, Opd1:b_, Opd2:f2_
	s.d $f4, 20($fp)	# Dest: b_
	l.d $f2, 28($fp)		# Source:c_
	li.d $f6, 10.50		# Loading float number 10.500000
	add.d $f4, $f2, $f6	# Result:temp8, Opd1:c_, Opd2:10.500000
	s.d $f4, 28($fp)	# Dest: c_
	l.d $f2, 20($fp)		# Source:b_
	l.d $f6, 28($fp)		# Source:c_
	add.d $f4, $f2, $f6	# Result:temp9, Opd1:b_, Opd2:c_
	j Label3

Label3:    	
	move $f0, $f4		# Source:temp1
	j epilogue_func3_

# Epilogue Begins
epilogue_func3_:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl func4_		# The following is the code (as oppose to data)
func4_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	li $v0, 4		# Source:4
	sw $v0, i1_	# Dest: i1_
	lw $v0, i1_		# Source:i1_
	lw $t1, i1_		# Source:i1_
	add $t0, $v0, $t1	# Result:temp10, Opd1:i1_, Opd2:i1_
	j Label3

Label3:    	
	move $v1, $t0		# Source:temp2
	j epilogue_func4_

# Epilogue Begins
epilogue_func4_:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	jal func1_
	add $sp, $sp, 0
	jal func4_
	add $sp, $sp, 0
	sw $v1, i2_	# Dest: i2_
	lw $v0, i2_		# Source:i2_
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	l.d $f2, f2_		# Source:f2_
	s.d $f2, 0($sp)
	sub $sp, $sp, 8
	lw $v0, i1_		# Source:i1_
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	jal func2_
	add $sp, $sp, 16
	sw $v1, i2_	# Dest: i2_
	l.d $f2, f2_		# Source:f2_
	s.d $f2, 0($sp)
	sub $sp, $sp, 8
	l.d $f2, f1_		# Source:f1_
	s.d $f2, 0($sp)
	sub $sp, $sp, 8
	lw $v0, i1_		# Source:i1_
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	jal func3_
	add $sp, $sp, 20
	s.d $f0, f2_	# Dest: f2_
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	l.d $f12, f1_		# Moving the value to be printed into register f12
	syscall
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	l.d $f12, f2_		# Moving the value to be printed into register f12
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends



	.data
global_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 20		# Make space for the locals
# Prologue ends

	li $v0, 2		# Source:2
	sw $v0, -8($fp)	# Dest: local_
	li $v0, 1		# Source:1
	sw $v0, global_	# Dest: global_
	li $v0, 1		# Source:1
	sw $v0, -12($fp)	# Dest: test_
	li $v0, 1		# Source:1
	sw $v0, -4($fp)	# Dest: temp_
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -8($fp)		# Moving the value to be printed into register a0
	syscall
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, global_		# Moving the value to be printed into register a0
	syscall
	li $v0, 5		# Loading 5 in v0 to indicate syscall to read integter value
	syscall
	sw $v0, -4($fp)	# Moving the read value from register v0
	lw $v0, -8($fp)		# Source:local_
	lw $t1, -4($fp)		# Source:temp_
	mul $t0, $v0, $t1	# Result:temp0, Opd1:local_, Opd2:temp_
	lw $v0, global_		# Source:global_
	add $t1, $v0, $t0	# Result:temp1, Opd1:global_, Opd2:temp0
	sw $t1, -12($fp)	# Dest: test_
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -12($fp)		# Moving the value to be printed into register a0
	syscall
	li $v0, 5		# Loading 5 in v0 to indicate syscall to read integter value
	syscall
	sw $v0, -4($fp)	# Moving the read value from register v0
	lw $v0, global_		# Source:global_
	lw $t1, -8($fp)		# Source:local_
	mul $t0, $v0, $t1	# Result:temp2, Opd1:global_, Opd2:local_
	lw $t1, -4($fp)		# Source:temp_
	div $v0, $t0, $t1	# Result:temp3, Opd1:temp2, Opd2:temp_
	sw $v0, -12($fp)	# Dest: test_
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -12($fp)		# Moving the value to be printed into register a0
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 20
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


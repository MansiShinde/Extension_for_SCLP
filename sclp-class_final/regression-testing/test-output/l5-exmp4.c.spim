
	.data
m_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl f_		# The following is the code (as oppose to data)
f_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 16		# Make space for the locals
# Prologue ends

	lw $v0, 12($fp)		# Source:n_
	li $t1, 0		# Source:0
	seq $t0, $v0, $t1	# Result:temp1, Opd1:n_, Opd2:0
	xori $v0, $t0, 1
	bgtz $v0, Label4 
	li $v0, 1		# Source:1
	sw $v0, -8($fp)	# Dest: ret_
	lw $v0, -8($fp)		# Source:ret_
	j Label5
	j Label4

Label4:    	
	lw $v0, 12($fp)		# Source:n_
	li $t1, 1		# Source:1
	sub $t0, $v0, $t1	# Result:temp3, Opd1:n_, Opd2:1
	sw $t0, -4($fp)	# Dest: k_
	lw $v0, -4($fp)		# Source:k_
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	jal f_
	add $sp, $sp, 4
	sw $v1, -8($fp)	# Dest: ret_
	lw $v0, 12($fp)		# Source:n_
	lw $t1, -8($fp)		# Source:ret_
	mul $t0, $v0, $t1	# Result:temp5, Opd1:n_, Opd2:ret_
	sw $t0, -8($fp)	# Dest: ret_
	lw $v0, -8($fp)		# Source:ret_
	j Label5

Label5:    	
	move $v1, $v0		# Source:temp0
	j epilogue_f_

# Epilogue Begins
epilogue_f_:
	add $sp, $sp, 16
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 16		# Make space for the locals
# Prologue ends

	li $v0, 5		# Source:5
	sw $v0, -8($fp)	# Dest: b_
	lw $v0, -8($fp)		# Source:b_
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	jal f_
	add $sp, $sp, 4
	sw $v1, -4($fp)	# Dest: a_
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -4($fp)		# Moving the value to be printed into register a0
	syscall
	li $v0, 2		# Source:2
	sw $v0, m_	# Dest: m_
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, m_		# Moving the value to be printed into register a0
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 16
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


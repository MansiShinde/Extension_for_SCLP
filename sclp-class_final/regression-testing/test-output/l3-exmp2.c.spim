
	.data
averageWorkingHoursPerDay_:	.double 0.0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 40		# Make space for the locals
# Prologue ends

	li.d $f2, 8.50		# Loading float number 8.500000
	s.d $f2, averageWorkingHoursPerDay_	# Dest: averageWorkingHoursPerDay_
	li.d $f2, 10000.00		# Loading float number 10000.000000
	s.d $f2, -24($fp)	# Dest: salary_
	li $v0, 7		# Loading 7 in v0 to indicate syscall to read double value
	syscall
	s.d $f0, -8($fp)	# Moving the read value from register f0
	l.d $f2, -8($fp)		# Source:employeeDailyWorkingHours_
	l.d $f4, averageWorkingHoursPerDay_		# Source:averageWorkingHoursPerDay_
	c.le.d $f2, $f4	
	li $v0, 1		# Opd1:employeeDailyWorkingHours_, Opd2:averageWorkingHoursPerDay_, 1
	movf $t0, $v0, 0
	xori $t1, $t0, 1
	bgtz $t1, Label4 
	l.d $f2, -24($fp)		# Source:salary_
	li.d $f6, 0.20		# Loading float number 0.200000
	mul.d $f4, $f2, $f6	# Result:temp1, Opd1:salary_, Opd2:0.200000
	s.d $f4, -32($fp)	# Dest: stemp0
	j Label5

Label4:    	
	l.d $f2, -24($fp)		# Source:salary_
	li.d $f6, 0.10		# Loading float number 0.100000
	mul.d $f4, $f2, $f6	# Result:temp2, Opd1:salary_, Opd2:0.100000
	s.d $f4, -32($fp)	# Dest: stemp0

Label5:    	
	l.d $f2, -32($fp)		# Source:stemp0
	s.d $f2, -16($fp)	# Dest: bonus_
	l.d $f2, -24($fp)		# Source:salary_
	l.d $f6, -16($fp)		# Source:bonus_
	add.d $f4, $f2, $f6	# Result:temp4, Opd1:salary_, Opd2:bonus_
	s.d $f4, -24($fp)	# Dest: salary_
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	l.d $f12, -24($fp)		# Moving the value to be printed into register f12
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 40
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


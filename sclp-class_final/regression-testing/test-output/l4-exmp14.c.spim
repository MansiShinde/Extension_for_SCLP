
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 32		# Make space for the locals
# Prologue ends

	li $v0, 2		# Source:2
	sw $v0, -24($fp)	# Dest: a_
	li $v0, 4		# Source:4
	sw $v0, -20($fp)	# Dest: b_
	li $v0, 10		# Source:10
	sw $v0, -16($fp)	# Dest: c_
	li $v0, 3		# Source:3
	sw $v0, -12($fp)	# Dest: d_
	li $v0, 8		# Source:8
	sw $v0, -8($fp)	# Dest: e_
	li $v0, 7		# Source:7
	sw $v0, -4($fp)	# Dest: f_
	lw $v0, -20($fp)		# Source:b_
	lw $t1, -16($fp)		# Source:c_
	add $t0, $v0, $t1	# Result:temp0, Opd1:b_, Opd2:c_
	lw $v0, -24($fp)		# Source:a_
	sge $t1, $v0, $t0	# Result:temp1, Opd1:a_, Opd2:temp0
	lw $v0, -8($fp)		# Source:e_
	lw $t2, -24($fp)		# Source:a_
	sub $t0, $v0, $t2	# Result:temp2, Opd1:e_, Opd2:a_
	lw $v0, -12($fp)		# Source:d_
	slt $t2, $v0, $t0	# Result:temp3, Opd1:d_, Opd2:temp2
	and $v0, $t1, $t2	# Result:temp4, Opd1:temp1, Opd2:temp3
	lw $t0, -4($fp)		# Source:f_
	lw $t2, -12($fp)		# Source:d_
	sne $t1, $t0, $t2	# Result:temp5, Opd1:f_, Opd2:d_
	or $t0, $v0, $t1	# Result:temp6, Opd1:temp4, Opd2:temp5
	xori $v0, $t0, 1
	bgtz $v0, Label4 
	lw $v0, -12($fp)		# Source:d_
	lw $t1, -8($fp)		# Source:e_
	mul $t0, $v0, $t1	# Result:temp7, Opd1:d_, Opd2:e_
	lw $t1, -4($fp)		# Source:f_
	div $v0, $t0, $t1	# Result:temp8, Opd1:temp7, Opd2:f_
	lw $t0, -24($fp)		# Source:a_
	add $t1, $t0, $v0	# Result:temp9, Opd1:a_, Opd2:temp8
	sw $t1, -24($fp)	# Dest: a_
	j Label5

Label4:    	
	li $v0, 1		# Source:1
	sw $v0, -20($fp)	# Dest: b_

Label5:    	
	NOP

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 32
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends



	.data
gpi_:	.double 0.0
_str_0:	.ascii "Ceil value"
_str_1:	.ascii "Floor value"

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 28		# Make space for the locals
# Prologue ends

	li.d $f2, 3.14		# Loading float number 3.140000
	s.d $f2, -8($fp)	# Dest: pi_
	li $v0, 3		# Source:3
	sw $v0, -12($fp)	# Dest: l_
	li $v0, 4		# Source:4
	sw $v0, -16($fp)	# Dest: u_
	li.d $f2, 3.14		# Loading float number 3.141592
	s.d $f2, gpi_	# Dest: gpi_
	la $v0, _str_0		# String = "Ceil value"
	sw $v0, -20($fp)	# Dest: m_
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	l.d $f12, -8($fp)		# Moving the value to be printed into register f12
	syscall
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	l.d $f12, gpi_		# Moving the value to be printed into register f12
	syscall
	l.d $f2, gpi_		# Source:gpi_
	s.d $f2, -8($fp)	# Dest: pi_
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	l.d $f12, -8($fp)		# Moving the value to be printed into register f12
	syscall
	li $v0, 4		# Loading 4 in v0 to indicate syscall to print string value
	la $a0, _str_1		# String = "Floor value"
	syscall
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -12($fp)		# Moving the value to be printed into register a0
	syscall
	li $v0, 4		# Loading 4 in v0 to indicate syscall to print string value
	lw $a0, -20($fp)		# Source:m_
	syscall
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -16($fp)		# Moving the value to be printed into register a0
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 28
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


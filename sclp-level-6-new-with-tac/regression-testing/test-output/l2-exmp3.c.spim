
	.data
value1_:	.double 0.0
_str_0:	.ascii "Provide a floating point value:"

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 24		# Make space for the locals
# Prologue ends

	li.d $f2, 2.40		# Loading float number 2.400000
	s.d $f2, value1_	# Dest: value1_
	li $v0, 4		# Loading 4 in v0 to indicate syscall to print string value
	la $a0, _str_0		# String = "Provide a floating point value:"
	syscall
	li $v0, 7		# Loading 7 in v0 to indicate syscall to read double value
	syscall
	s.d $f0, -8($fp)	# Moving the read value from register f0
	l.d $f2, value1_		# Source:value1_
	l.d $f6, -8($fp)		# Source:value2_
	mul.d $f4, $f2, $f6	# Result:temp0, Opd1:value1_, Opd2:value2_
	s.d $f4, -16($fp)	# Dest: result_
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	l.d $f12, -16($fp)		# Moving the value to be printed into register f12
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 24
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


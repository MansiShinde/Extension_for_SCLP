
	.data
area_:	.double 0.0
perimeter_:	.double 0.0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 24		# Make space for the locals
# Prologue ends

	li.d $f2, 3.00		# Loading float number 3.000000
	s.d $f2, -16($fp)	# Dest: x_
	li.d $f2, 9.90		# Loading float number 9.900000
	s.d $f2, -8($fp)	# Dest: y_
	l.d $f2, -16($fp)		# Source:x_
	l.d $f6, -8($fp)		# Source:y_
	mul.d $f4, $f2, $f6	# Result:temp0, Opd1:x_, Opd2:y_
	s.d $f4, area_	# Dest: area_
	l.d $f2, -16($fp)		# Source:x_
	l.d $f6, -8($fp)		# Source:y_
	add.d $f4, $f2, $f6	# Result:temp1, Opd1:x_, Opd2:y_
	li.d $f2, 2.00		# Loading float number 2.000000
	mul.d $f6, $f2, $f4	# Result:temp2, Opd1:2.000000, Opd2:temp1
	s.d $f6, perimeter_	# Dest: perimeter_
	li.d $f2, 3.14		# Loading float number 3.140000
	l.d $f6, -16($fp)		# Source:x_
	mul.d $f4, $f2, $f6	# Result:temp3, Opd1:3.140000, Opd2:x_
	l.d $f6, -16($fp)		# Source:x_
	mul.d $f2, $f4, $f6	# Result:temp4, Opd1:temp3, Opd2:x_
	s.d $f2, area_	# Dest: area_
	li.d $f2, 2.00		# Loading float number 2.000000
	li.d $f6, 22.00		# Loading float number 22.000000
	mul.d $f4, $f2, $f6	# Result:temp5, Opd1:2.000000, Opd2:22.000000
	l.d $f6, -16($fp)		# Source:x_
	mul.d $f2, $f4, $f6	# Result:temp6, Opd1:temp5, Opd2:x_
	li.d $f6, 7.00		# Loading float number 7.000000
	div.d $f4, $f2, $f6	# Result:temp7, Opd1:temp6, Opd2:7.000000
	s.d $f4, perimeter_	# Dest: perimeter_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 24
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends



	.data
a_:	.word 0
b_:	.double 0.0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 20		# Make space for the locals
# Prologue ends

	li $v0, 2		# Source:2
	sw $v0, -4($fp)	# Dest: c_
	li.d $f2, 4.30		# Loading float number 4.300000
	s.d $f2, -12($fp)	# Dest: d_
	lw $v0, -4($fp)		# Source:c_
	neg $t0, $v0		# Result:temp0, Opd1:c_
	lw $v0, a_		# Source:a_
	mul $t1, $v0, $t0	# Result:temp1, Opd1:a_, Opd2:temp0
	lw $t0, a_		# Source:a_
	add $v0, $t1, $t0	# Result:temp2, Opd1:temp1, Opd2:a_
	lw $t1, a_		# Source:a_
	add $t0, $v0, $t1	# Result:temp3, Opd1:temp2, Opd2:a_
	sw $t0, a_	# Dest: a_
	l.d $f2, b_		# Source:b_
	neg.d $f4, $f2		# Result:temp4, Opd1:b_
	l.d $f6, -12($fp)		# Source:d_
	mul.d $f2, $f4, $f6	# Result:temp5, Opd1:temp4, Opd2:d_
	l.d $f4, -12($fp)		# Source:d_
	neg.d $f6, $f4		# Result:temp6, Opd1:d_
	div.d $f4, $f2, $f6	# Result:temp7, Opd1:temp5, Opd2:temp6
	l.d $f6, b_		# Source:b_
	add.d $f2, $f4, $f6	# Result:temp8, Opd1:temp7, Opd2:b_
	s.d $f2, -12($fp)	# Dest: d_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 20
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


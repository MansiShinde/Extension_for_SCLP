
	.data
_str_0:	.ascii "Hi"

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 52		# Make space for the locals
# Prologue ends

	li $v0, 2		# Source:2
	sw $v0, -16($fp)	# Dest: c_
	li $v0, 3		# Source:3
	sw $v0, -12($fp)	# Dest: b_
	la $v0, _str_0		# String = "Hi"
	sw $v0, -32($fp)	# Dest: s_
	li.d $f2, 3.50		# Loading float number 3.500000
	s.d $f2, -40($fp)	# Dest: z_
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	li $a0, 5		# Moving the value to be printed into register a0
	syscall
	li $v0, 3		# Loading 3 in v0 to indicate syscall to print double value
	li.d $f12, 5.60		# Moving the value to be printed into register f12
	syscall
	li $v0, 4		# Loading 4 in v0 to indicate syscall to print string value
	la $a0, _str_0		# String = "Hi"
	syscall
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -8($fp)		# Moving the value to be printed into register a0
	syscall
	li $v0, 5		# Loading 5 in v0 to indicate syscall to read integter value
	syscall
	sw $v0, -12($fp)	# Moving the read value from register v0
	lw $v0, -8($fp)		# Source:x_
	lw $t1, -12($fp)		# Source:b_
	slt $t0, $v0, $t1	# Result:temp0, Opd1:x_, Opd2:b_
	lw $v0, -12($fp)		# Source:b_
	lw $t2, -16($fp)		# Source:c_
	sgt $t1, $v0, $t2	# Result:temp1, Opd1:b_, Opd2:c_
	lw $v0, -16($fp)		# Source:c_
	lw $t3, -12($fp)		# Source:b_
	seq $t2, $v0, $t3	# Result:temp2, Opd1:c_, Opd2:b_
	xori $v0, $t2, 1
	and $t2, $t1, $v0	# Result:temp4, Opd1:temp1, Opd2:temp3
	or $v0, $t0, $t2	# Result:temp5, Opd1:temp0, Opd2:temp4
	xori $t0, $v0, 1
	bgtz $t0, Label4 
	lw $v0, -16($fp)		# Source:c_
	neg $t0, $v0		# Result:temp6, Opd1:c_
	lw $t1, -8($fp)		# Source:x_
	mul $v0, $t0, $t1	# Result:temp7, Opd1:temp6, Opd2:x_
	lw $t1, -8($fp)		# Source:x_
	add $t0, $v0, $t1	# Result:temp8, Opd1:temp7, Opd2:x_
	lw $t1, -8($fp)		# Source:x_
	add $v0, $t0, $t1	# Result:temp9, Opd1:temp8, Opd2:x_
	lw $t0, -16($fp)		# Source:c_
	neg $t1, $t0		# Result:temp10, Opd1:c_
	lw $t0, -12($fp)		# Source:b_
	add $t2, $t0, $t1	# Result:temp11, Opd1:b_, Opd2:temp10
	lw $t0, -16($fp)		# Source:c_
	div $t1, $t0, $t2	# Result:temp12, Opd1:c_, Opd2:temp11
	sub $t0, $v0, $t1	# Result:temp13, Opd1:temp9, Opd2:temp12
	sw $t0, -44($fp)	# Dest: stemp0
	j Label5

Label4:    	
	lw $v0, -16($fp)		# Source:c_
	li $t1, 20		# Source:20
	mul $t0, $v0, $t1	# Result:temp14, Opd1:c_, Opd2:20
	li $t1, 30		# Source:30
	sub $v0, $t0, $t1	# Result:temp15, Opd1:temp14, Opd2:30
	sw $v0, -44($fp)	# Dest: stemp0

Label5:    	
	lw $v0, -44($fp)		# Source:stemp0
	sw $v0, -8($fp)	# Dest: x_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 52
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


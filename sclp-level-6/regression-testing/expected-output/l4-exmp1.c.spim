
	.data
test_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 12		# Make space for the locals
# Prologue ends

	li $v0, 0		# Source:0
	sw $v0, test_	# Dest: test_
	li $v0, 10		# Source:10
	sw $v0, -4($fp)	# Dest: loop_

Label3:    	
	lw $v0, -4($fp)		# Source:loop_
	li $t1, 1		# Source:1
	sgt $t0, $v0, $t1	# Result:temp0, Opd1:loop_, Opd2:1
	xori $v0, $t0, 1
	bgtz $v0, Label8 
	lw $v0, -4($fp)		# Source:loop_
	li $t1, 1		# Source:1
	sub $t0, $v0, $t1	# Result:temp1, Opd1:loop_, Opd2:1
	sw $t0, -4($fp)	# Dest: loop_
	lw $v0, -4($fp)		# Source:loop_
	li $t1, 0		# Source:0
	seq $t0, $v0, $t1	# Result:temp2, Opd1:loop_, Opd2:0
	xori $v0, $t0, 1
	bgtz $v0, Label6 
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -4($fp)		# Moving the value to be printed into register a0
	syscall
	j Label7

Label6:    	
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, test_		# Moving the value to be printed into register a0
	syscall

Label7:    	
	j Label3

Label8:    	

Label8:    	
	lw $v0, -4($fp)		# Source:loop_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp6, Opd1:loop_, Opd2:1
	sw $t0, -4($fp)	# Dest: loop_
	lw $v0, -4($fp)		# Source:loop_
	li $t1, 10		# Source:10
	slt $t0, $v0, $t1	# Result:temp5, Opd1:loop_, Opd2:10
	bgtz $t0, Label8 
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -4($fp)		# Moving the value to be printed into register a0
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 12
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


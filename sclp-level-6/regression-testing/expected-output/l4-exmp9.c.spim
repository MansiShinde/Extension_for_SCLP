
	.data
c_:	.word 0
b_:	.word 0
a_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 20		# Make space for the locals
# Prologue ends

	lw $v0, a_		# Source:a_
	li $t1, 20		# Source:20
	sgt $t0, $v0, $t1	# Result:temp0, Opd1:a_, Opd2:20
	xori $v0, $t0, 1
	bgtz $v0, Label4 
	li $v0, 20		# Source:20
	sw $v0, b_	# Dest: b_
	j Label5

Label4:    	
	li $v0, 30		# Source:30
	sw $v0, c_	# Dest: c_

Label5:    	

Label5:    	
	lw $v0, b_		# Source:b_
	li $t1, 20		# Source:20
	sgt $t0, $v0, $t1	# Result:temp2, Opd1:b_, Opd2:20
	lw $v0, c_		# Source:c_
	li $t2, 30		# Source:30
	slt $t1, $v0, $t2	# Result:temp3, Opd1:c_, Opd2:30
	and $v0, $t0, $t1	# Result:temp4, Opd1:temp2, Opd2:temp3
	xori $t0, $v0, 1
	bgtz $t0, Label8 
	lw $v0, b_		# Source:b_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp5, Opd1:b_, Opd2:1
	sw $t0, b_	# Dest: b_
	j Label5

Label8:    	

Label8:    	
	lw $v0, c_		# Source:c_
	li $t1, 2		# Source:2
	add $t0, $v0, $t1	# Result:temp8, Opd1:c_, Opd2:2
	sw $t0, c_	# Dest: c_
	lw $v0, c_		# Source:c_
	li $t1, 30		# Source:30
	sgt $t0, $v0, $t1	# Result:temp7, Opd1:c_, Opd2:30
	bgtz $t0, Label8 

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 20
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


Program:
**PROCEDURE: main, Return Type: VOID
**BEGIN: Abstract Syntax Tree 
         Asgn:
           LHS (Name : a_<int>)
           RHS (Num : 2<int>)
         Asgn:
           LHS (Name : b_<int>)
           RHS (Num : 4<int>)
         Asgn:
           LHS (Name : c_<int>)
           RHS (Num : 10<int>)
         Asgn:
           LHS (Name : d_<int>)
           RHS (Num : 3<int>)
         Asgn:
           LHS (Name : e_<int>)
           RHS (Num : 8<int>)
         Asgn:
           LHS (Name : f_<int>)
           RHS (Num : 7<int>)
         If: 
           Condition (
             Condition: OR<bool>
               L_Opd (
                 Condition: AND<bool>
                   L_Opd (
                     Condition: GE<bool>
                       L_Opd (Name : a_<int>)
                       R_Opd (
                         Arith: Plus<int>
                           L_Opd (Name : b_<int>)
                           R_Opd (Name : c_<int>)))
                   R_Opd (
                     Condition: LT<bool>
                       L_Opd (Name : d_<int>)
                       R_Opd (
                         Arith: Minus<int>
                           L_Opd (Name : e_<int>)
                           R_Opd (Name : a_<int>))))
               R_Opd (
                 Condition: NE<bool>
                   L_Opd (Name : f_<int>)
                   R_Opd (Name : d_<int>)))
           Then (
             Asgn:
               LHS (Name : a_<int>)
               RHS (
                 Arith: Plus<int>
                   L_Opd (Name : a_<int>)
                   R_Opd (
                     Arith: Div<int>
                       L_Opd (
                         Arith: Mult<int>
                           L_Opd (Name : d_<int>)
                           R_Opd (Name : e_<int>))
                       R_Opd (Name : f_<int>))))
           Else (
             Asgn:
               LHS (Name : b_<int>)
               RHS (Num : 1<int>))
**END: Abstract Syntax Tree 

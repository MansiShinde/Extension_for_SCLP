
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 36		# Make space for the locals
# Prologue ends

	li $v0, 14
	sw $v0, -12($fp)
	li $v0, 36
	sw $v0, -16($fp)
	lw $v0, -12($fp)
	sw $v0, -4($fp)
	lw $v0, -16($fp)
	sw $v0, -8($fp)

Label3:    	
	lw $v0, -8($fp)
	li $t1, 0
	sne $t0, $v0, $t1
	xori $v0, $t0, 1
	bgtz $v0, Label5 
	lw $v0, -8($fp)
	sw $v0, -20($fp)
	lw $v0, -4($fp)
	lw $t1, -8($fp)
	div $t0, $v0, $t1
	lw $t1, -8($fp)
	mul $v0, $t0, $t1
	sw $v0, -8($fp)
	lw $v0, -20($fp)
	sw $v0, -4($fp)
	j Label3

Label5:    	
	lw $v0, -4($fp)
	sw $v0, -24($fp)
	lw $v0, -12($fp)
	lw $t1, -16($fp)
	mul $t0, $v0, $t1
	lw $t1, -24($fp)
	div $v0, $t0, $t1
	sw $v0, -28($fp)

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 36
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


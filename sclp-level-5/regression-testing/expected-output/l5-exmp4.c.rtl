**PROCEDURE: f_
**BEGIN: RTL Statements
	load:    	v0 <- n_    
	iLoad:    	t0 <- 0    	;; Loading integer number 0
	seq:    	v0 <- v0 , t0
	not:    	v0 <- v0
	goto Label1
	iLoad:    	v0 <- 1    	;; Loading integer number 1
	store:    	ret_ <- v0    
	load:    	v0 <- ret_    
	goto:    	Label0
	goto:    	Label1

  Label1:    	
	load:    	v0 <- n_    
	iLoad:    	t0 <- 1    	;; Loading integer number 1
	sub:    	v0 <- v0 , t0
	store:    	k_ <- v0    
	load:    	v0 <- k_    
	push:    	v0
	v1 = call f_
	store:    	ret_ <- v1    
	load:    	v0 <- n_    
	load:    	t0 <- ret_    
	mul:    	v0 <- v0 , t0
	store:    	ret_ <- v0    
	load:    	v0 <- ret_    
	goto:    	Label0

  Label0:    	
	move:    	v1 <- v0    
	return		v1
**END: RTL Statements
**PROCEDURE: main
**BEGIN: RTL Statements
	iLoad:    	v0 <- 5    	;; Loading integer number 5
	store:    	b_ <- v0    
	load:    	v0 <- b_    
	push:    	v0
	v1 = call f_
	store:    	a_ <- v1    
	iLoad:    	v0 <- 1    	;; Loading 1 in v0 to indicate syscall to print integter value
	load:    	a0 <- a_    	;; Moving the value to be printed into register a0
	write				;; This is where syscall will be made
	iLoad:    	t0 <- 2    	;; Loading integer number 2
	store:    	m_ <- t0    
	iLoad:    	v0 <- 1    	;; Loading 1 in v0 to indicate syscall to print integter value
	load:    	a0 <- m_    	;; Moving the value to be printed into register a0
	write				;; This is where syscall will be made
**END: RTL Statements


	.data
global1_:	.word 0
global2_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 20		# Make space for the locals
# Prologue ends

	li $v0, 5		# Loading 5 in v0 to indicate syscall to read integter value
	syscall
	sw $v0, -4($fp)	# Moving the read value from register v0
	lw $v0, -4($fp)		# Source:local_
	sw $v0, global2_	# Dest: global2_
	li $v0, 5		# Source:5
	sw $v0, global1_	# Dest: global1_
	lw $v0, global2_		# Source:global2_
	lw $t1, global1_		# Source:global1_
	sgt $t0, $v0, $t1	# Result:temp0, Opd1:global2_, Opd2:global1_
	lw $v0, -4($fp)		# Source:local_
	li $t2, 2		# Source:2
	sub $t1, $v0, $t2	# Result:temp1, Opd1:local_, Opd2:2
	li $t2, 0		# Source:0
	sne $v0, $t1, $t2	# Result:temp2, Opd1:temp1, Opd2:0
	and $t1, $t0, $v0	# Result:temp3, Opd1:temp0, Opd2:temp2
	xori $v0, $t1, 1
	bgtz $v0, Label4 
	li $v0, 1		# Source:1
	sw $v0, -12($fp)	# Dest: stemp0
	j Label5

Label4:    	
	li $v0, 0		# Source:0
	sw $v0, -12($fp)	# Dest: stemp0

Label5:    	
	lw $v0, -12($fp)		# Source:stemp0
	sw $v0, -8($fp)	# Dest: ans_
	lw $v0, -8($fp)		# Source:ans_
	li $t1, 1		# Source:1
	seq $t0, $v0, $t1	# Result:temp5, Opd1:ans_, Opd2:1
	xori $v0, $t0, 1
	bgtz $v0, Label9 

Label6:    	
	lw $v0, global2_		# Source:global2_
	li $t1, 0		# Source:0
	sgt $t0, $v0, $t1	# Result:temp6, Opd1:global2_, Opd2:0
	xori $v0, $t0, 1
	bgtz $v0, Label8 
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, global2_		# Moving the value to be printed into register a0
	syscall
	lw $v0, global2_		# Source:global2_
	li $t1, 1		# Source:1
	sub $t0, $v0, $t1	# Result:temp7, Opd1:global2_, Opd2:1
	sw $t0, global2_	# Dest: global2_
	j Label6

Label8:    	
	j Label11

Label9:    	

Label9:    	
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, global2_		# Moving the value to be printed into register a0
	syscall
	lw $v0, global2_		# Source:global2_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp11, Opd1:global2_, Opd2:1
	sw $t0, global2_	# Dest: global2_
	lw $v0, global2_		# Source:global2_
	li $t1, 10		# Source:10
	slt $t0, $v0, $t1	# Result:temp10, Opd1:global2_, Opd2:10
	bgtz $t0, Label9 

Label11:    	
	NOP

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 20
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


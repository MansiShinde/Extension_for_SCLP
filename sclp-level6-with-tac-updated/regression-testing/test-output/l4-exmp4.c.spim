
	.data
_str_0:	.ascii " "
_str_1:	.ascii "Your number is: "

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 12		# Make space for the locals
# Prologue ends

	li $v0, 5		# Loading 5 in v0 to indicate syscall to read integter value
	syscall
	sw $v0, -4($fp)	# Moving the read value from register v0
	lw $v0, -4($fp)		# Source:n_
	li $t1, 5		# Source:5
	sge $t0, $v0, $t1	# Result:temp0, Opd1:n_, Opd2:5
	lw $v0, -4($fp)		# Source:n_
	li $t2, 10		# Source:10
	sle $t1, $v0, $t2	# Result:temp1, Opd1:n_, Opd2:10
	and $v0, $t0, $t1	# Result:temp2, Opd1:temp0, Opd2:temp1
	xori $t0, $v0, 1
	bgtz $t0, Label6 

Label3:    	
	lw $v0, -4($fp)		# Source:n_
	li $t1, 0		# Source:0
	sgt $t0, $v0, $t1	# Result:temp3, Opd1:n_, Opd2:0
	xori $v0, $t0, 1
	bgtz $v0, Label5 
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -4($fp)		# Moving the value to be printed into register a0
	syscall
	li $v0, 4		# Loading 4 in v0 to indicate syscall to print string value
	la $a0, _str_0		# String = " "
	syscall
	lw $v0, -4($fp)		# Source:n_
	li $t1, 1		# Source:1
	sub $t0, $v0, $t1	# Result:temp4, Opd1:n_, Opd2:1
	sw $t0, -4($fp)	# Dest: n_
	j Label3

Label5:    	
	j Label10

Label6:    	
	lw $v0, -4($fp)		# Source:n_
	li $t1, 1024		# Source:1024
	sle $t0, $v0, $t1	# Result:temp7, Opd1:n_, Opd2:1024
	li $v0, 1024		# Source:1024
	neg $t1, $v0		# Result:temp8, Opd1:1024
	lw $v0, -4($fp)		# Source:n_
	sge $t2, $v0, $t1	# Result:temp9, Opd1:n_, Opd2:temp8
	and $v0, $t0, $t2	# Result:temp10, Opd1:temp7, Opd2:temp9
	xori $t0, $v0, 1
	bgtz $t0, Label9 

Label7:    	
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -4($fp)		# Moving the value to be printed into register a0
	syscall
	li $v0, 4		# Loading 4 in v0 to indicate syscall to print string value
	la $a0, _str_0		# String = " "
	syscall
	lw $v0, -4($fp)		# Source:n_
	li $t1, 2		# Source:2
	div $t0, $v0, $t1	# Result:temp12, Opd1:n_, Opd2:2
	sw $t0, -4($fp)	# Dest: n_
	lw $v0, -4($fp)		# Source:n_
	li $t1, 0		# Source:0
	sne $t0, $v0, $t1	# Result:temp11, Opd1:n_, Opd2:0
	bgtz $t0, Label7 
	j Label10

Label9:    	
	li $v0, 4		# Loading 4 in v0 to indicate syscall to print string value
	la $a0, _str_1		# String = "Your number is: "
	syscall
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -4($fp)		# Moving the value to be printed into register a0
	syscall

Label10:    	

Label10:    	
	NOP

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 12
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


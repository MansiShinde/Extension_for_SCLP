
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 12		# Make space for the locals
# Prologue ends

	li $v0, 3		# Source:3
	sw $v0, -4($fp)	# Dest: a_
	lw $v0, -4($fp)		# Source:a_
	neg $t0, $v0		# Result:temp0, Opd1:a_
	li $t1, 3		# Source:3
	sub $v0, $t0, $t1	# Result:temp1, Opd1:temp0, Opd2:3
	lw $t0, -4($fp)		# Source:a_
	neg $t1, $t0		# Result:temp2, Opd1:a_
	sub $t0, $v0, $t1	# Result:temp3, Opd1:temp1, Opd2:temp2
	lw $v0, -4($fp)		# Source:a_
	neg $t1, $v0		# Result:temp4, Opd1:a_
	sub $v0, $t0, $t1	# Result:temp5, Opd1:temp3, Opd2:temp4
	li $t1, 4		# Source:4
	sub $t0, $v0, $t1	# Result:temp6, Opd1:temp5, Opd2:4
	lw $v0, -4($fp)		# Source:a_
	neg $t1, $v0		# Result:temp7, Opd1:a_
	lw $v0, -4($fp)		# Source:a_
	neg $t2, $v0		# Result:temp8, Opd1:a_
	sub $v0, $t1, $t2	# Result:temp9, Opd1:temp7, Opd2:temp8
	sub $t1, $t0, $v0	# Result:temp10, Opd1:temp6, Opd2:temp9
	sw $t1, -4($fp)	# Dest: a_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 12
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends



	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 152		# Make space for the locals
# Prologue ends

	li $v0, 3		# Source:3
	sw $v0, -64($fp)	# Dest: a_
	li $v0, 4		# Source:4
	sw $v0, -60($fp)	# Dest: b_
	li $v0, 3		# Source:3
	sw $v0, -56($fp)	# Dest: c_
	li $v0, 4		# Source:4
	sw $v0, -52($fp)	# Dest: d_
	li $v0, 3		# Source:3
	sw $v0, -48($fp)	# Dest: e_
	li $v0, 4		# Source:4
	sw $v0, -44($fp)	# Dest: f_
	li $v0, 3		# Source:3
	sw $v0, -40($fp)	# Dest: g_
	li $v0, 4		# Source:4
	sw $v0, -36($fp)	# Dest: h_
	li $v0, 3		# Source:3
	sw $v0, -32($fp)	# Dest: i_
	li $v0, 4		# Source:4
	sw $v0, -28($fp)	# Dest: j_
	li $v0, 3		# Source:3
	sw $v0, -24($fp)	# Dest: k_
	li $v0, 4		# Source:4
	sw $v0, -20($fp)	# Dest: l_
	li $v0, 3		# Source:3
	sw $v0, -16($fp)	# Dest: m_
	li $v0, 4		# Source:4
	sw $v0, -12($fp)	# Dest: n_
	li.d $f2, 3.00		# Loading float number 3.000000
	s.d $f2, -144($fp)	# Dest: q_
	li.d $f2, 4.00		# Loading float number 4.000000
	s.d $f2, -136($fp)	# Dest: r_
	li.d $f2, 3.00		# Loading float number 3.000000
	s.d $f2, -128($fp)	# Dest: s_
	li.d $f2, 4.00		# Loading float number 4.000000
	s.d $f2, -120($fp)	# Dest: t_
	li.d $f2, 3.00		# Loading float number 3.000000
	s.d $f2, -112($fp)	# Dest: u_
	li.d $f2, 4.00		# Loading float number 4.000000
	s.d $f2, -104($fp)	# Dest: v_
	li.d $f2, 3.00		# Loading float number 3.000000
	s.d $f2, -96($fp)	# Dest: w_
	li.d $f2, 4.00		# Loading float number 4.000000
	s.d $f2, -88($fp)	# Dest: x_
	li.d $f2, 3.00		# Loading float number 3.000000
	s.d $f2, -80($fp)	# Dest: y_
	li.d $f2, 4.00		# Loading float number 4.000000
	s.d $f2, -72($fp)	# Dest: z_
	lw $v0, -48($fp)		# Source:e_
	lw $t1, -44($fp)		# Source:f_
	mul $t0, $v0, $t1	# Result:temp0, Opd1:e_, Opd2:f_
	lw $v0, -40($fp)		# Source:g_
	lw $t2, -36($fp)		# Source:h_
	sub $t1, $v0, $t2	# Result:temp1, Opd1:g_, Opd2:h_
	lw $t2, -32($fp)		# Source:i_
	div $v0, $t1, $t2	# Result:temp2, Opd1:temp1, Opd2:i_
	add $t1, $t0, $v0	# Result:temp3, Opd1:temp0, Opd2:temp2
	lw $v0, -52($fp)		# Source:d_
	div $t0, $v0, $t1	# Result:temp4, Opd1:d_, Opd2:temp3
	lw $t1, -28($fp)		# Source:j_
	div $v0, $t0, $t1	# Result:temp5, Opd1:temp4, Opd2:j_
	lw $t0, -20($fp)		# Source:l_
	lw $t2, -16($fp)		# Source:m_
	add $t1, $t0, $t2	# Result:temp6, Opd1:l_, Opd2:m_
	lw $t2, -12($fp)		# Source:n_
	sub $t0, $t1, $t2	# Result:temp7, Opd1:temp6, Opd2:n_
	lw $t1, -24($fp)		# Source:k_
	mul $t2, $t1, $t0	# Result:temp8, Opd1:k_, Opd2:temp7
	add $t0, $v0, $t2	# Result:temp9, Opd1:temp5, Opd2:temp8
	lw $v0, -56($fp)		# Source:c_
	mul $t1, $v0, $t0	# Result:temp10, Opd1:c_, Opd2:temp9
	lw $v0, -60($fp)		# Source:b_
	add $t0, $v0, $t1	# Result:temp11, Opd1:b_, Opd2:temp10
	sw $t0, -64($fp)	# Dest: a_
	l.d $f2, -80($fp)		# Source:y_
	l.d $f6, -72($fp)		# Source:z_
	div.d $f4, $f2, $f6	# Result:temp12, Opd1:y_, Opd2:z_
	l.d $f2, -88($fp)		# Source:x_
	div.d $f6, $f2, $f4	# Result:temp13, Opd1:x_, Opd2:temp12
	l.d $f2, -96($fp)		# Source:w_
	div.d $f4, $f2, $f6	# Result:temp14, Opd1:w_, Opd2:temp13
	l.d $f2, -104($fp)		# Source:v_
	div.d $f6, $f2, $f4	# Result:temp15, Opd1:v_, Opd2:temp14
	l.d $f2, -112($fp)		# Source:u_
	div.d $f4, $f2, $f6	# Result:temp16, Opd1:u_, Opd2:temp15
	l.d $f2, -120($fp)		# Source:t_
	div.d $f6, $f2, $f4	# Result:temp17, Opd1:t_, Opd2:temp16
	l.d $f2, -128($fp)		# Source:s_
	div.d $f4, $f2, $f6	# Result:temp18, Opd1:s_, Opd2:temp17
	l.d $f2, -136($fp)		# Source:r_
	div.d $f6, $f2, $f4	# Result:temp19, Opd1:r_, Opd2:temp18
	s.d $f6, -144($fp)	# Dest: q_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 152
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


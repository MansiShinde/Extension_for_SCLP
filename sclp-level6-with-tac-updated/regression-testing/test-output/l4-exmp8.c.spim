
	.data
b_:	.word 0
a_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 24		# Make space for the locals
# Prologue ends

	li $v0, 1		# Source:1
	sw $v0, -16($fp)	# Dest: a1_
	li $v0, 1		# Source:1
	sw $v0, -12($fp)	# Dest: a2_
	li $v0, 1		# Source:1
	sw $v0, a_	# Dest: a_
	li $v0, 1		# Source:1
	sw $v0, b_	# Dest: b_
	li $v0, 1		# Source:1
	sw $v0, -8($fp)	# Dest: c_
	li $v0, 1		# Source:1
	sw $v0, -4($fp)	# Dest: d_

Label3:    	
	lw $v0, -16($fp)		# Source:a1_
	li $t1, 100		# Source:100
	sle $t0, $v0, $t1	# Result:temp0, Opd1:a1_, Opd2:100
	xori $v0, $t0, 1
	bgtz $v0, Label19 
	lw $v0, a_		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp1, Opd1:a_, Opd2:1
	sw $t0, a_	# Dest: a_
	li $v0, 2		# Source:2
	li $t1, 3		# Source:3
	sge $t0, $v0, $t1	# Result:temp2, Opd1:2, Opd2:3
	xori $v0, $t0, 1
	bgtz $v0, Label16 
	lw $v0, a_		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp3, Opd1:a_, Opd2:1
	sw $t0, a_	# Dest: a_
	j Label16

Label16:    	
	li $v0, 3		# Source:3
	li $t1, 2		# Source:2
	sge $t0, $v0, $t1	# Result:temp5, Opd1:3, Opd2:2
	xori $v0, $t0, 1
	bgtz $v0, Label8 
	lw $v0, a_		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp6, Opd1:a_, Opd2:1
	sw $t0, a_	# Dest: a_
	j Label8

Label8:    	
	li $v0, 2		# Source:2
	li $t1, 3		# Source:3
	sle $t0, $v0, $t1	# Result:temp8, Opd1:2, Opd2:3
	xori $v0, $t0, 1
	bgtz $v0, Label10 
	lw $v0, a_		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp9, Opd1:a_, Opd2:1
	sw $t0, a_	# Dest: a_
	j Label10

Label10:    	
	li $v0, 2		# Source:2
	li $t1, 3		# Source:3
	sne $t0, $v0, $t1	# Result:temp11, Opd1:2, Opd2:3
	xori $v0, $t0, 1
	bgtz $v0, Label12 
	lw $v0, a_		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp12, Opd1:a_, Opd2:1
	sw $t0, a_	# Dest: a_
	j Label12

Label12:    	
	li $v0, 2		# Source:2
	li $t1, 3		# Source:3
	seq $t0, $v0, $t1	# Result:temp14, Opd1:2, Opd2:3
	xori $v0, $t0, 1
	bgtz $v0, Label14 
	lw $v0, a_		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp15, Opd1:a_, Opd2:1
	sw $t0, a_	# Dest: a_
	j Label14

Label14:    	
	li $v0, 4		# Source:4
	li $t1, 3		# Source:3
	sge $t0, $v0, $t1	# Result:temp17, Opd1:4, Opd2:3
	xori $v0, $t0, 1
	bgtz $v0, Label16 
	lw $v0, a_		# Source:a_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp18, Opd1:a_, Opd2:1
	sw $t0, a_	# Dest: a_
	j Label16

Label16:    	

Label6:    	
	lw $v0, -16($fp)		# Source:a1_
	li $t1, 1		# Source:1
	add $t0, $v0, $t1	# Result:temp21, Opd1:a1_, Opd2:1
	sw $t0, -16($fp)	# Dest: a1_
	lw $v0, -16($fp)		# Source:a1_
	li $t1, 200		# Source:200
	sle $t0, $v0, $t1	# Result:temp20, Opd1:a1_, Opd2:200
	bgtz $t0, Label6 
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -16($fp)		# Moving the value to be printed into register a0
	syscall
	j Label3

Label19:    	
	li $v0, 1		# Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, a_		# Moving the value to be printed into register a0
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 24
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


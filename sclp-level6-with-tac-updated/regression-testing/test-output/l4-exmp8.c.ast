Program:
**PROCEDURE: main, Return Type: VOID
**BEGIN: Abstract Syntax Tree 
         Asgn:
           LHS (Name : a1_<int>)
           RHS (Num : 1<int>)
         Asgn:
           LHS (Name : a2_<int>)
           RHS (Num : 1<int>)
         Asgn:
           LHS (Name : a_<int>)
           RHS (Num : 1<int>)
         Asgn:
           LHS (Name : b_<int>)
           RHS (Num : 1<int>)
         Asgn:
           LHS (Name : c_<int>)
           RHS (Num : 1<int>)
         Asgn:
           LHS (Name : d_<int>)
           RHS (Num : 1<int>)
         While: 
           Condition (
             Condition: LE<bool>
               L_Opd (Name : a1_<int>)
               R_Opd (Num : 100<int>))
           Body (
             Asgn:
               LHS (Name : a_<int>)
               RHS (
                 Arith: Plus<int>
                   L_Opd (Name : a_<int>)
                   R_Opd (Num : 1<int>))
             If: 
               Condition (
                 Condition: GE<bool>
                   L_Opd (Num : 2<int>)
                   R_Opd (Num : 3<int>))
               Then (
                 Asgn:
                   LHS (Name : a_<int>)
                   RHS (
                     Arith: Plus<int>
                       L_Opd (Name : a_<int>)
                       R_Opd (Num : 1<int>)))
             If: 
               Condition (
                 Condition: GE<bool>
                   L_Opd (Num : 3<int>)
                   R_Opd (Num : 2<int>))
               Then (
                 Asgn:
                   LHS (Name : a_<int>)
                   RHS (
                     Arith: Plus<int>
                       L_Opd (Name : a_<int>)
                       R_Opd (Num : 1<int>)))
             If: 
               Condition (
                 Condition: LE<bool>
                   L_Opd (Num : 2<int>)
                   R_Opd (Num : 3<int>))
               Then (
                 Asgn:
                   LHS (Name : a_<int>)
                   RHS (
                     Arith: Plus<int>
                       L_Opd (Name : a_<int>)
                       R_Opd (Num : 1<int>)))
             If: 
               Condition (
                 Condition: NE<bool>
                   L_Opd (Num : 2<int>)
                   R_Opd (Num : 3<int>))
               Then (
                 Asgn:
                   LHS (Name : a_<int>)
                   RHS (
                     Arith: Plus<int>
                       L_Opd (Name : a_<int>)
                       R_Opd (Num : 1<int>)))
             If: 
               Condition (
                 Condition: EQ<bool>
                   L_Opd (Num : 2<int>)
                   R_Opd (Num : 3<int>))
               Then (
                 Asgn:
                   LHS (Name : a_<int>)
                   RHS (
                     Arith: Plus<int>
                       L_Opd (Name : a_<int>)
                       R_Opd (Num : 1<int>)))
             If: 
               Condition (
                 Condition: GE<bool>
                   L_Opd (Num : 4<int>)
                   R_Opd (Num : 3<int>))
               Then (
                 Asgn:
                   LHS (Name : a_<int>)
                   RHS (
                     Arith: Plus<int>
                       L_Opd (Name : a_<int>)
                       R_Opd (Num : 1<int>)))
             Do:
               Body (
                 Asgn:
                   LHS (Name : a1_<int>)
                   RHS (
                     Arith: Plus<int>
                       L_Opd (Name : a1_<int>)
                       R_Opd (Num : 1<int>)))
               While Condition (
                 Condition: LE<bool>
                   L_Opd (Name : a1_<int>)
                   R_Opd (Num : 200<int>))
             Write: Name : a1_<int>)
         Write: Name : a_<int>
**END: Abstract Syntax Tree 

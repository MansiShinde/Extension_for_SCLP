
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 40		# Make space for the locals
# Prologue ends

	li $v0, 3		# Source:3
	sw $v0, -32($fp)	# Dest: a_
	li $v0, 4		# Source:4
	sw $v0, -28($fp)	# Dest: b_
	li $v0, 5		# Source:5
	sw $v0, -24($fp)	# Dest: c_
	lw $v0, -28($fp)		# Source:b_
	lw $t1, -24($fp)		# Source:c_
	add $t0, $v0, $t1	# Result:temp0, Opd1:b_, Opd2:c_
	lw $v0, -32($fp)		# Source:a_
	div $t1, $v0, $t0	# Result:temp1, Opd1:a_, Opd2:temp0
	sw $t1, -20($fp)	# Dest: d_
	lw $v0, -32($fp)		# Source:a_
	lw $t1, -28($fp)		# Source:b_
	div $t0, $v0, $t1	# Result:temp2, Opd1:a_, Opd2:b_
	lw $t1, -24($fp)		# Source:c_
	add $v0, $t0, $t1	# Result:temp3, Opd1:temp2, Opd2:c_
	sw $v0, -16($fp)	# Dest: e_
	lw $v0, -32($fp)		# Source:a_
	lw $t1, -28($fp)		# Source:b_
	add $t0, $v0, $t1	# Result:temp4, Opd1:a_, Opd2:b_
	lw $t1, -24($fp)		# Source:c_
	div $v0, $t0, $t1	# Result:temp5, Opd1:temp4, Opd2:c_
	sw $v0, -12($fp)	# Dest: f_
	lw $v0, -28($fp)		# Source:b_
	lw $t1, -24($fp)		# Source:c_
	sub $t0, $v0, $t1	# Result:temp6, Opd1:b_, Opd2:c_
	lw $v0, -32($fp)		# Source:a_
	add $t1, $v0, $t0	# Result:temp7, Opd1:a_, Opd2:temp6
	sw $t1, -8($fp)	# Dest: g_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 40
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends



	.data
a_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 20		# Make space for the locals
# Prologue ends

	li $v0, 5		# Source:5
	sw $v0, a_	# Dest: a_
	li $v0, 1		# Source:1
	sw $v0, -8($fp)	# Dest: b_
	li $v0, 3		# Source:3
	li $t1, 2		# Source:2
	sgt $t0, $v0, $t1	# Result:temp0, Opd1:3, Opd2:2
	xori $v0, $t0, 1
	bgtz $v0, Label4 
	lw $v0, a_		# Source:a_
	sw $v0, -12($fp)	# Dest: stemp0
	j Label5

Label4:    	
	li $v0, 4		# Source:4
	sw $v0, -12($fp)	# Dest: stemp0

Label5:    	
	lw $v0, -12($fp)		# Source:stemp0
	li $t1, 5		# Source:5
	sgt $t0, $v0, $t1	# Result:temp2, Opd1:stemp0, Opd2:5
	xori $v0, $t0, 1
	bgtz $v0, Label7 
	li $v0, 10		# Source:10
	sw $v0, -4($fp)	# Dest: c_
	j Label9

Label7:    	
	lw $v0, a_		# Source:a_
	li $t1, 5		# Source:5
	seq $t0, $v0, $t1	# Result:temp4, Opd1:a_, Opd2:5
	xori $v0, $t0, 1
	bgtz $v0, Label9 
	li $v0, 2		# Source:2
	sw $v0, -4($fp)	# Dest: c_
	j Label9

Label9:    	

Label9:    	
	NOP

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 20
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


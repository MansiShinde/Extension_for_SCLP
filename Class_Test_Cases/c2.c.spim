
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 60		# Make space for the locals
# Prologue ends

	la $v0, -48($fp)		# Loading the address of base:x_
	lw $t0, d_		# Source:d_
	add $v0, $v0, $t0	# Address of Opd1:x_, offset:d_
	lw $t1, 0($v0)		# Indirect load of the final result
	move $t2, $t1		# Result:temp0, Register move of Opd1:x_.d_
	li $t1, 34546		# Source:34546
	la $t1, -32($fp)		# Loading the address of base:y_
	lw $t3, d_		# Source:d_
	add $t1, $t1, $t3	# Address of Opd1:y_, offset:d_
	lw $t4, 0($t1)		# Indirect load of the final result
	move $t5, $t4		# Result:temp1, Register move of Opd1:y_.d_
	li $t4, 453		# Source:453
	la $t4, -16($fp)		# Loading the address of base:z_
	lw $t6, d_		# Source:d_
	add $t4, $t4, $t6	# Address of Opd1:z_, offset:d_
	lw $t7, 0($t4)		# Indirect load of the final result
	move $t8, $t7		# Result:temp2, Register move of Opd1:z_.d_
	li $t7, 12		# Source:12
	la $t7, -48($fp)		# Loading the address of base:x_
	lw $t9, d_		# Source:d_
	add $t7, $t7, $t9	# Address of Opd1:x_, offset:d_
	lw $s0, 0($t7)		# Indirect load of the final result
	move $s1, $s0		# Result:temp3, Register move of Opd1:x_.d_
	la $s0, -32($fp)		# Loading the address of base:y_
	lw $s2, d_		# Source:d_
	add $s0, $s0, $s2	# Address of Opd1:y_, offset:d_
	lw $s3, 0($s0)		# Indirect load of the final result
	move $s4, $s3		# Result:temp4, Register move of Opd1:y_.d_
	add $s3, $s1, $s4	# Result:temp5, Opd1:temp3, Opd2:temp4
	la $s1, -16($fp)		# Loading the address of base:z_
	lw $s4, d_		# Source:d_
	add $s1, $s1, $s4	# Address of Opd1:z_, offset:d_
	lw $s5, 0($s1)		# Indirect load of the final result
	move $s6, $s5		# Result:temp6, Register move of Opd1:z_.d_
	add $s5, $s3, $s6	# Result:temp7, Opd1:temp5, Opd2:temp6
	sw $s5, -52($fp)	# Dest: m_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 60
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


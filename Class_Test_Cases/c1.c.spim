
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 24		# Make space for the locals
# Prologue ends

	li $v0, 5		# Source:5
	li $t1, 100		# Source:100
	add $t0, $v0, $t1	# Result:temp0, Opd1:5, Opd2:100
	li $t1, 1500		# Source:1500
	add $v0, $t0, $t1	# Result:temp1, Opd1:temp0, Opd2:1500
	la $t0, -16($fp)		# Loading the address of base:x_
	lw $t1, d_		# Source:d_
	add $t0, $t0, $t1	# Address of Opd1:x_, offset:d_
	lw $t2, 0($t0)		# Indirect load of the final result
	move $t3, $t2		# Result:temp2, Register move of Opd1:x_.d_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 24
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


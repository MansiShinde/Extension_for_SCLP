
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 24		# Make space for the locals
# Prologue ends

	li.d $f2, 98.45		# Loading float number 98.453400
	li.d $f6, 108.89		# Loading float number 108.889000
	add.d $f4, $f2, $f6	# Result:temp0, Opd1:98.453400, Opd2:108.889000
	li.d $f6, 343.34		# Loading float number 343.343000
	add.d $f2, $f4, $f6	# Result:temp1, Opd1:temp0, Opd2:343.343000
	la $v0, -16($fp)		# Loading the address of base:x_
	l.d $f4, b_		# Source:b_
	add $v0, $v0, $f4	# Address of Opd1:x_, offset:b_
	lw.w $f6, 0($v0)		# Indirect load of the final result
	mov.d $f8, $f6		# Result:temp2, Register move of Opd1:x_.b_

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 24
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


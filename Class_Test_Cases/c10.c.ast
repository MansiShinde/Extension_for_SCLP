Program:
**PROCEDURE: func_, Return Type: INT
	n_  Type:INT
**BEGIN: Abstract Syntax Tree 
         Return: Name : n_<int>
**END: Abstract Syntax Tree 
**PROCEDURE: main, Return Type: VOID
**BEGIN: Abstract Syntax Tree 
         Asgn:
           LHS (Name : a_<int>)
           RHS (
             FN CALL: func_(
             Num : 5<int>))
         Asgn:
           LHS (
             Field_Access: <int>
               Base (Name : x_<class - A_>)
               Offset (Name : d_<int>))
           RHS (Num : 5<int>)
         Asgn:
           LHS (Name : m_<int>)
           RHS (
             Arith: Plus<int>
               L_Opd (
                 Field_Access: <int>
                   Base (Name : x_<class - A_>)
                   Offset (Name : d_<int>))
               R_Opd (
                 Field_Access: <int>
                   Base (Name : y_<class - A_>)
                   Offset (Name : d_<int>)))
         Asgn:
           LHS (Name : m_<int>)
           RHS (
             Field_Access: <int>
               Base (Name : x_<class - A_>)
               Offset (Name : d_<int>))
         Asgn:
           LHS (Name : a_<int>)
           RHS (
             Arith: Plus<int>
               L_Opd (
                 Field_Access: <int>
                   Base (Name : l_<class - Compiler_>)
                   Offset (Name : var_<int>))
               R_Opd (
                 Field_Access: <int>
                   Base (Name : x_<class - A_>)
                   Offset (Name : d_<int>)))
         Asgn:
           LHS (Name : a_<int>)
           RHS (
             Field_Access: <int>
               Base (Name : l_<class - Compiler_>)
               Offset (Name : var_<int>))
**END: Abstract Syntax Tree 
